

var Origin = \ filename string position
  var self = Create()
  self.filename = filename
  self.string = string
  self.position = position

  self.LocationMessage = \
    return 'in %s on line %d column %d\n%s\n%s*\n'.Format([
        self.filename,
        self.LineNumber(),
        self.ColumnNumber(),
        self.Line(),
        ' '.Multiply(self.ColumnNumber().Subtract(1)),
    ])

  self.LineNumber = \
    return self.string.Count('\n', 0, self.position).Add(1)

  self.ColumnNumber = \
    return self.position.Subtract(self.LineStart()).Add(1)

  self.Line = \
    return self.string.Slice(self.LineStart(), self.LineEnd())

  self.LineStart = \
    var i = self.position
    while i.GreaterThanOrEqualTo(0) and self.string.Get(i).NotEqual('\n')
      i = i.Subtract(1)
    return i.Add(1)

  self.LineEnd = \
    var i = self.position
    while i.LessThan(self.string.Size()) and self.string.Get(i).NotEqual('\n')
      i = i.Add(1)
    return i

  return self


var Token = \ type value origin
  var self = Create()
  self.type = type
  self.value = value
  self.origin = origin

  self.Equal = \ other
    return self.type.Equal(other.type) and self.value.Equal(other.value)

  self.Inspect = \
    return 'Token(%r,%r)'.Format([self.type, self.value])

  return self


var SYMBOLS = [
    '\\', '.',
    '(', ')', '[', ']',
    '=',
    ';', ',',
]

var KEYWORDS = [
    'while', 'break',
    'if', 'else',
    'and', 'or',
    'return',
    'var',
]


var LexError = \ message origin
  self = Create()
  self.String = \ . message.Add('\n').Add(origin.LocationMessage())
  return self


var Lex = \ string filename
  var tokens = []
  var depth = 0
  var s = string
  var i = 0
  var j = 0
  var indent_stack = ['']

  var MakeOrigin = \ . Origin(filename, s, j)

  var MakeToken = \ type value . Token(type, value, MakeOrigin())

  while true
    while i.LessThan(s.Size()) and (s.Get(i).Equal('#') or (s.Get(i).IsSpace() and (depth or s.Get(i).NotEqual('\n'))))
      if s.Get(i).Equal('#')
        while i.LessThan(s.Size()) and s.Get(i).NotEqual('\n')
          i = i.Add(1)
        else
          i = i.Add(1)

    j = i

    if i.GreaterThanOrEqualTo(s.Size())
      break

    if s.Get(i).Equal('\n')
      i = i.Add(1)
      tokens.Push(MakeToken())

  "outside while loop".Print()


### Tests

var origin = Origin('<test>', r"""
hello world!
""", 1)

Assert(origin.Line().Equal('hello world!'), origin.Line())

Assert(origin.LocationMessage().Equal("""in <test> on line 2 column 1
hello world!
*
"""), origin.LocationMessage())

Lex(r"""
""",
'<test>')
